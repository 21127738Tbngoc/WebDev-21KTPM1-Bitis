<script>
    //Product image list
    window.onload = function () {
        const firstImage = document.querySelector('.product-img-list img:first-child');
        firstImage.click(); // Simulate a click on the first image
    }

    function changeThumbnail(event) {
        const src = event.target.src;
        const thumbnail = document.querySelector('.product-thumbnail');
        thumbnail.src = src;
        const images = document.querySelectorAll('.Product-img-list img');
        images.forEach(img => img.style.border = 'none');
        event.target.style.border = '2px solid black';
    }

    //Product quantity
    function minusQuantity() {
        let quantityInput = document.getElementById("quantity");
        let currentQuantity = parseInt(quantityInput.value);

        if (currentQuantity > 1) {
            quantityInput.value = currentQuantity - 1;
        }
    }

    function plusQuantity() {
        let quantityInput = document.getElementById("quantity");
        let currentQuantity = parseInt(quantityInput.value);

        quantityInput.value = currentQuantity + 1;
    }

    //Product variants
    function selectSize(sizeButton) {
        const sizeButtons = document.querySelectorAll('.Product-sizes button');
        sizeButtons.forEach(button => button.style.border = 'none');
        sizeButton.style.border = '2px solid black';
        console.log("Selected size: " + sizeButton.textContent);
    }

    function selectColor(colorButton) {
        const colorButtons = document.querySelectorAll('.Product-color button');
        colorButtons.forEach(button => button.style.border = 'none');
        colorButton.style.border = '2px solid black';
        console.log("Selected color: " + colorButton.style.backgroundColor);
    }
    console.log(typeof `{{Product}}`)
</script>

<!--Display-->
<div class="container-fluid">
    <div class="container product-display">
        <div class="row g-4">
            <div class="col">
                <div class="left-display">
                    <!--Product images-->
                    <div class="product-img-list">
                        <img src={{Product.images.[0]}} onclick="changeThumbnail(event)">
                        <img src={{Product.images.[1]}} onclick="changeThumbnail(event)">
                        <img src={{Product.images.[2]}} onclick="changeThumbnail(event)">
                    </div>
<!--                    Product thumbnail-->
                    <img class="product-thumbnail" src='{{Product.images.[0]}}' alt="">
                </div>
            </div>
            <div class="col">
                <div class="right-display">
                    <!--Product name-->
                    <h4 class="product-name">{{Product.name}}</h4>
                    <!--Product rating-->
                    <div class="product-rating align-items-center">
                        <img src="{{rating Product.rating_average}}" alt="">
                        <p>(211)</p>
                    </div>
                    <!--Product price-->
                    <h3 class="product-price">{{currency Product.price}}</h3>
                    <!--Product stock-->
                    <p>Tình trạng: <a class="product-stock"><strong>{{pStatus Product.quantity}} ({{Product.quantity}}
                        )</strong></a>
                        <!--Product description-->
                    <div class="product-description">
                        <!--Nâng tầm mỗi bước chạy với đôi giày chạy bộ hiệu suất cao của chúng tôi! Thiết kế với vật liệu nhẹ và đế đàn hồi, đôi giày này mang lại sự thoải mái và hỗ trợ vô song qua từng dặm đường. Phần upper bằng vải lưới thông thoáng giúp giữ đôi chân mát mẻ trong khi lớp lót đệm hấp thụ lực tác động.-->
                        {{{Product.description}}}
                    </div>
                    <!--Product variants-->
                    <div class="products-variants mb-3">
                        <div class="product-sizes">
                            <p style="margin: 0;">Kích thước:</p>
                            <div class="size-option d-flex">
                                <button onclick="selectSize(this)">35</button>
                                <button onclick="selectSize(this)">36</button>
                                <button onclick="selectSize(this)">37</button>
                                <button onclick="selectSize(this)">38</button>
                                <button onclick="selectSize(this)">39</button>
                                <button onclick="selectSize(this)">40</button>
                                <button onclick="selectSize(this)">41</button>
                                <button onclick="selectSize(this)">42</button>
                                <button onclick="selectSize(this)">43</button>
                            </div>
                        </div>
                    </div>
                    <div class="product-qty">
                        <p style="margin: 0;">Số lượng:</p>
                        <div class="product-quantity mb-2">
                            <input type="button" value="-" onclick="minusQuantity()" class="qty-btn">
                            <input type="text" id="quantity" name="quantity" value="1" min="1" class="qty-input">
                            <input type="button" value="+" onclick="plusQuantity()" class="qty-btn">
                        </div>
                    </div>
                    <div class="d-flex">
                        <button class="primary-button mb-3 me-3" onclick="addToCart({{Product}},document.getElementById('quantity').value)">THÊM VÀO GIỎ HÀNG</button>
                        <button class="outline-button mb-3" onclick="addToCart({{Product}},document.getElementById('quantity').value)">MUA NGAY</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Rating & reviews-->
<div class="container-fluid">
    <div class="container">
        <div class="border-bottom">
            {{#if User}}
                {{> addAComment User}}
            {{else}}
                <button onclick=openModal()><h4>Hãy đăng nhập để bình luận và đánh giá</h4></button>
            {{/if}}
        </div>
        <div class="container mt-1 d-flex justify-content-center">
            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <ul class="list-unstyled" id="comments-container">
                            {{#each feedbacks}}
                                {{> commentBox feedback=this}}
                            {{/each}}
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Related-->
<h2 class="border-bottom mb-5">Các sản phẩm liên quan</h2>
<div class="container-fluid">
    <div class="container" style="display: flex">
        {{#each relatedProducts}}
            {{> index_product_card product=this}}
        {{/each}}
    </div>
</div>

<script>
    let cards = document.getElementsByClassName('product-card-container')
    for (let i = 0 ; i < cards.length; i++)
    {
        cards[i].style = "display: flex"
    }
</script>

<script>
    function create_Element(string) {
        let parser = new DOMParser();
        let HTMLdocument = parser.parseFromString(string, 'text/html');
        return HTMLdocument.body.firstElementChild;
    }

    const loadingElement = create_Element(`<div id="loading-container" class="justify-content-center" style="display:block; z-index: 9999;">
        <div class="loading-divider" aria-hidden="true"></div>
        <p class="loading-text" aria-label="Loading">
            <span class="loading-letter" aria-hidden="true">L</span>
            <span class="loading-letter" aria-hidden="true">o</span>
            <span class="loading-letter" aria-hidden="true">a</span>
            <span class="loading-letter" aria-hidden="true">d</span>
            <span class="loading-letter" aria-hidden="true">i</span>
            <span class="loading-letter" aria-hidden="true">n</span>
            <span class="loading-letter" aria-hidden="true">g</span>
        </p>
    </div>`)

    async function CommentsLoading(query) {
    const Filter = query.filter || {};
    const Sort = query.sort || {name: "ascending"};
    const Limit = query.limit || 2 ** 32;
    let Data = await $.ajax(
        {
            url: 'http://localhost:3000/feedbacks/',
            method: 'GET',
            data: {
                filter: Filter,
                sort: Sort,
                limit: Limit,
            },
            success: (data, status) => {
                return {data: data, status: status}
            },
            error: (errors) => errors
        });

    let allProducts = []

    for (let i = 0; i < Data.length; i++) {
        if (Data[i]) {
            let data = await $.ajax(
                {
                    url: 'http://localhost:3000/hbs/partials/',
                    method: 'POST',
                    data:
                        {
                            partial: 'product_card',
                            data: Data[i],
                        },
                    success: (data, status) => {
                        return {data: data, status: status}
                    },
                    error: (errors) => errors
                })
            let partial = createElement(data)
            allProducts.push(partial);
        }
    }
    return allProducts;
}

    async function loadCommentsPage(query, page) {
        document.getElementById("product-page").append(loadingElement)
        let allProducts = await DataLoading(query);
        let container = document.getElementById('product-container');
        while (container.firstChild) {
            container.removeChild(container.firstChild)
        }
        for (let i = 18 * page; i < 18 * (page + 1); i++) {
            if (allProducts[i])
            {
                container.append(allProducts[i])
            }
        }
        document.getElementById("loading-container").remove()
        container.scrollIntoView({behavior: "smooth"});
    }

    async function createPageButtons(query) {
        let allProducts = await DataLoading(query);
        let container = document.getElementById('page-bar');
        while (container.firstChild) {
            container.removeChild(container.firstChild)
        }
        for (let i = 0; i <= (allProducts.length / 18); i++) {
            let button = createElement(`<li><button onclick=loadProductPage(query,${i})>${i+1}</button></li>`)
            container.append(button)
        }
    }

    async function filtering(category) {
        categories[1] = category
        query.filter.categories = {$all: categories};
        await createPageButtons(query)
        await loadProductPage(query, 0)
    }

    async function sortOption(option) {
        switch (option) {
            case "A-Z":
                query.sort = {name: "ascending"};
                break;
            case "Z-A":
                query.sort = {name: "descending"};
                break;
            case "price+1":
                query.sort = {price: "ascending"};
                break;
            case "price-1":
                query.sort = {price: "descending"};
                break;
        }
        await createPageButtons(query)
        await loadProductPage(query, 0)
    }

    function addToCart(product,quantity)
    {
        let dataToPush = {product: product, quantity: quantity}
        let cart = localStorage.getItem("cart")
        cart = cart? JSON.parse(cart):[]
        const existingObj = cart.find(item => item.product._id === dataToPush.product._id);
        if (existingObj) {
            existingObj.quantity += dataToPush.quantity;
        } else {
            cart.push(dataToPush);
        }
        localStorage.setItem("cart",JSON.stringify(cart))
    }

</script>
